apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'

group 'me.kr328'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def localProperties = new Properties();
localProperties.load(new FileReader("local.properties"))

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    main.compileClasspath += files("android-sdk/android.jar");
    test.compileClasspath += files("android-sdk/android.jar");
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
}

task transformClassesWithDex(type: Exec) {
    executable localProperties.get("android.sdk") + "/build-tools/" + localProperties.get("android.buildtools") + "/d8"
    args += ["--output", "$buildDir/intermediate/dex/ibr_injector.jar", "--lib", "$projectDir/android-sdk/android.jar"]

    setStandardOutput  System.out
    setErrorOutput     System.err

    doFirst {
        file("$buildDir/intermediate/dex").mkdirs();

        args += fileTree("$buildDir/classes/")
    }

    onlyIf {
        return !classes.state.upToDate;
    }

    dependsOn(classes)
}

task buildNative(type: Exec) {
    executable localProperties.get("android.ndk") + "/ndk-build"
    args += ["NDK_LIBS_OUT=$buildDir/intermediate/native-libs", "NDK_OUT=$buildDir/intermediate/native-objs", "NDK_PROJECT_PATH=$projectDir/src/main/cpp"]

    doLast {
        file("$buildDir/intermediate/magisk-module/system").mkdirs()
    }
}

task prepareMagiskModule {
    doLast {
        copy {
            from file("$projectDir/src/main/raw/magisk-module-config/")
            into file("$buildDir/intermediate/magisk-module/")
        }
        copy {
            from file("$buildDir/intermediate/native-libs/")
            into file("$buildDir/intermediate/magisk-module/loader/")
        }
        copy {
            from file("$buildDir/intermediate/dex/")
            into file("$buildDir/intermediate/magisk-module/system/framework/")
        }
    }

    dependsOn transformClassesWithDex, buildNative
}

task makeMagiskModule(type: Zip) {
    from "$buildDir/intermediate/magisk-module/"
    destinationDir file("$buildDir/outputs")
    archiveName "magisk-module.zip"

    dependsOn prepareMagiskModule
}

task signMagiskModule(type: Exec) {
    executable localProperties.get("android.sdk") + "/build-tools/" + localProperties.get("android.buildtools") + "/apksigner"
    args += ["sign" ,"--min-sdk-version" ,"24" ,"--max-sdk-version" ,"28"]

    setStandardOutput  System.out
    setErrorOutput     System.err

    onlyIf {
        def keystorePath     = localProperties.get("sign.keystore")
        def keystorePassword = localProperties.get("sign.keystore.password")
        def alias            = localProperties.get("sign.alias")
        def aliasPassword    = localProperties.get("sign.alias.password")

        if ( keystorePath == null || keystorePassword == null || alias == null || aliasPassword == null )
            return false

        args += ["--ks" ,keystorePath ,"--ks-pass" ,"pass:" + keystorePassword ,"--ks-key-alias" ,alias ,"--key-pass" ,"pass:" + aliasPassword]
        args += ["$buildDir/outputs/magisk-module.zip"]

        return true
    }

    dependsOn makeMagiskModule
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

assemble.dependsOn(transformClassesWithDex)